{% liquid
assign form_action = action | split: 'action="' | last | split: '"' | first
assign classes_form = form_class | default: ''
assign subscribe_title = settings.subscribe_html_title
assign field_placeholder_email = settings.subscribe_html_placeholder_email
assign field_placeholder_birthday = settings.subscribe_html_placeholder_birthday
assign list_id = settings.newsletter_subs_popup_list_id
assign heading = settings.newsletter_subs_popup_heading
assign success_message = settings.newsletter_subs_popup_success_message
%}

<style>
  .footer-subscribe-form {
    font-family: 'Radio Grotesk';
    border-radius: 12px;
    width: 100%;
    max-width: 360px;
    position: relative;
  }
  
  .footer-subscribe-form h1 {
    color: var(--soft-black-700, #352B27);
    text-align: start;
    font-family: 'At-Surt-Semibold';
    font-size: 14px;
    font-style: normal;
    line-height: 20px;
    margin-bottom: 24px;
  }

  .footer-subscribe-form h1 .subcopy {
    color: var(--soft-black-700, #352B27);
    text-align: start;
    font-family: 'Radio Grotesk';
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px;
    margin-top: 8px;
    display: inline-block;
  }
  
  /* Klaviyo field groups */
  #footerForm .klaviyo_field_group {
    margin-bottom: 0;
    padding: 0;
  }
  
  #footerForm .klaviyo_field_group input {
    font-family: 'Radio Grotesk';
    font-size: 14px;
    margin: 0;
    width: 100%;
    color: var(--black_color);
  }
  
  #footerForm .klaviyo_field_group label[for="email"] {
    display: none;
  }
  
  #footerForm .klaviyo_field_group input[name="email"] {
    border: 0;
    padding: 15px 12px;
    border-radius: 8px;
    text-transform: unset;
    color: var(--black_color);
    background: var(--soft-black-50, #F8F8F8);
  }
  
  #footerForm .klaviyo_field_group input::placeholder {
    font-family: 'Radio Grotesk';
    font-size: 14px;
    color: #AEAAA9;
    text-transform: initial;
  }
  
  #footerForm .klaviyo_field_group label[for="birthday"] {
    border: 0;
    padding: 15px 12px;
    border-radius: 8px;
    text-transform: unset;
    font-size: 14px;
    font-family: 'Radio Grotesk';
    color: #AEAAA9;
    background: var(--soft-black-50, #F8F8F8);
    margin-top: 8px;
    display: block;
  }
  
  #footerForm .klaviyo_field_group:focus-within label[for="birthday"],
  #footerForm .klaviyo_field_group:hover label[for="birthday"] {
    display: none;
  }

  #footerForm .klaviyo_field_group .birthday-input {
    display: none;
  }
  
  #footerForm .klaviyo_field_group:focus-within .birthday-input,
  #footerForm .klaviyo_field_group:hover .birthday-input {
    display: flex;
  }
  
  #footerForm .klaviyo_field_group:has(> .input-error-message) #email,
  #footerForm .klaviyo_field_group:has(.birthday-submit-wrapper > .input-error-message) label[for='birthday'],
  #footerForm .klaviyo_field_group:has(.birthday-submit-wrapper > .input-error-message) .birthday-input {
    border: 1px solid #B44720;
  }
  
  /* Birthday input field styles */
  .birthday-submit-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .birthday-input {
    display: flex;
    gap: 0px;
    margin-top: 8px;
    flex-grow: 1;
    padding: 15px 12px;
    border-radius: 8px;
    width: 100%;
    background: var(--soft-black-50, #F8F8F8);
  }
  
  .birthday-input .birthday-input__input-container {
    display: block;
    width: fit-content;
    flex-direction: column;
  }
  
  .birthday-input__input-container + span {
    font-family: 'AT-Surt-Semibold';
    line-height: 135%;
    margin: 0 5px;
  }
  
  .birthday-input input {
    padding: 0;
    border: 0;
    color: var(--black_color);
  }
  
  input#birthdayMonth,
  input#birthdayDay {
    max-width: 31px;
    width: 26px !important;
  }
  
  /* Shopping preference styles */
  .shopping-for__input-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    margin-top: 24px;
  }

  .shopping-for__input-container h3 {
    font-family: 'Radio Grotesk';
    font-size: 14px;
    color: var(--soft-black-700, #352B27);
    line-height: 20px;
    margin-bottom: 8px;
  }

  .shopping-preference {
    display: flex;
    gap: 8px;
    justify-content: space-between;
    text-align: center;
    align-items: center;
  }

  .shopping-preference div {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .shopping-preference div label {
    font-family: 'Radio Grotesk';
    font-size: 14px;
    color: var(--soft-black-600, #554D4A);
    line-height: 20px;
    margin-left: 8px;
  }

  .shopping-preference input {
    width: auto !important;
  }

  .shopping-preference div input[type="radio"] {
    appearance: none;
    width: 24px !important;
    height: 24px;
    border: 1px solid #D7D6D0;
    border-radius: 50%;
    cursor: pointer;
    margin: 0;
  }

  .shopping-preference div input[type="radio"]:checked {
    background-color: #FFF;
    border-style: outset;
    border: 1px solid #352B27;
    position: relative;
  }

  .shopping-preference div input[type="radio"]:checked::after {
    content: '';
    display: flex;
    width: 70%;
    height: 70%;
    border-radius: 100%;
    background: #352b27;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  
  /* Error message styles */
  .input-error-message {
    padding-bottom: 4px;
    line-height: 100%;
    font-size: 9px;
    color: #B44720;
    font-family: 'Radio Grotesk';
    display: block;
    margin: 4px auto 0 0;
  }
  
  .error_message {
    margin-top: 16px;
    color: #B44720;
  }
  
  .custom-error {
    display: none;
    font-size: 9px;
    color: #B44720;
    font-family: 'Radio Grotesk';
    margin-top: 8px;
  }
  
  .klaviyo_submit {
    display: flex;
    justify-content: center;
    flex-shrink: 0;
  }
  
  .footer-subscribe-btn {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-radius: 8px;
    padding: 12px 40px;
    background-color: var(--black_color);
    color: var(--base-white, #FFF);
    font-family: 'Radio Grotesk';
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px;
    border: 1px solid transparent;
    cursor: pointer;
  }
  
  .footer-subscribe-btn:hover {
    background: white;
    border: 1px solid #352b27;
    color: #352b27;
  }
  
  .klaviyo_messages .success_message {
    font-family: 'Radio Grotesk';
    color: #352B27;
    padding: 20px;
    border-radius: 8px;
    text-align: center;
    font-size: 14px;
    margin-bottom: 0;
    line-height: 150%;
    display: flex;
    flex-direction: column;
    row-gap: 8px;
  }
  
  .klaviyo_messages .success_message .success-top {
    font-family: 'AT-SURT-SEMIBOLD';
  }

  .success-cta {
    margin: 20px auto 0;
    width: fit-content;
    padding: 12px 40px;
    border-radius: 8px;
    background: #352B27;
    color: white !important;
    text-decoration: none;
    font-family: 'Radio Grotesk';
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px;
    display: inline-block;
  }

  #footerFormSubmitBtn{
    display: inline-block;
    border-radius: 8px;
    padding: 12px 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--black_color);
    color: var(--base-white, #FFF);
    margin-top: 40px;
    
    /* Text md/Regular */
    font-family: 'Radio Grotesk';
    font-size: 14px;
    font-style: normal;
    font-weight: 400;
    line-height: 20px; /* 142.857% */
    border: 1px solid transparent;
  }
  #footerFormSubmitBtn:hover{
    background: white;
    border: 1px solid #352b27;
    color: #352b27;
  }
  
  /* Make sure success message is visible */
  .success_message[style*="display: flex"] {
    display: flex !important;
    opacity: 1 !important;
    visibility: visible !important;
  }
  
  /* Remove browser defaults for number inputs */
  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  @media (max-width: 767px) {
    .footer-content {
      width: 100%;
      padding: 40px 16px;
      display: flex;
      justify-content: center;
    }
    .footer-subscribe-form {
      width: 100%;
      max-width: 100%;
    }
  }

  /* Firefox */
  input[type=number] {
    -moz-appearance: textfield;
  }
</style>

<form action="//manage.kmail-lists.com/subscriptions/subscribe"
  data-ajax-submit="//manage.kmail-lists.com/ajax/subscriptions/subscribe" id="footerForm"
  class="{{classes_form}} subscribe-custom" method="POST" novalidate="novalidate">
  <input type="hidden" name="g" value="{{ list_id }}">
  <input type="hidden" name="$fields" value="Birthday,Shopping_For,$source">
  <input type="hidden" name="Shopping_For" id="popup_shopping_for_hidden" value="">
  <input type="hidden" name="$source" value="Footer NL">
  
  {% if subscribe_title != blank %}
  <div class="form__head">
    <h2>{{ subscribe_title }}</h2>
    <p class="form__message hidden"></p>
    <div id="footer-logo" class="desktop">
      <img id="footer-logo--img" src="{{ footer_logo | image_url }}" alt="" loading="lazy">
    </div>
  </div>
  {% endif %}
  
  <div class="form__body">
    <div class="klaviyo_field_group hide_on_submit">
      <label for="email">Email</label>
      <input class="" type="email" value="" name="email" id="email" placeholder="Email address" />
      
      <label for="birthday">Birthday</label>
      <input class="" type="hidden" value="" name="Birthday" id="birthday"/>
      <div class="birthday-submit-wrapper">
        <div class="birthday-input">
          <div class="birthday-input__input-container">
            <input id="birthdayMonth" type="number" value="" min="1" max="12" placeholder="MM" maxlength="2"/>
          </div>
          <span>/</span>
          <div class="birthday-input__input-container">
            <input id="birthdayDay" type="number" value="" min="1" max="31" placeholder="DD" maxlength="2" />
          </div> 
          <span>/</span>
          <div class="birthday-input__input-container"> 
            <input id="birthdayYear" type="number" value="" min="1000" placeholder="YYYY" maxlength="4" />
          </div>     
        </div>
        
        <div class="shopping-for__input-container">
          <h3>Shopping for:</h3>
          <div class="shopping-preference">
            <div>
              <input type="radio" id="eyewear" name="shopping_for" value="Eyewear">
              <label for="eyewear">Eyewear</label>
            </div>
            <div>
              <input type="radio" id="flask" name="shopping_for" value="Flask">
              <label for="flask">Flask</label>
            </div>
            <div>
              <input type="radio" id="both" name="shopping_for" value="Both">
              <label for="both">Both</label>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Add success message section -->
    <div class="klaviyo_messages">
      <div class="success_message" style="display:none;">
        <div class="success-top">{{ success_message }}</div>
        <a href="/collections/all" class="success-cta">Browse products</a>
      </div>
      <div class="error_message" style="display:none;"></div>
    </div>
    
    <div class="form__actions">
      <button class="btn-subscribe" id="footerFormSubmitBtn" type="button">
        <span class="btn-subscribe__text">Subscribe</span>
      </button>
    </div>
  </div>
</form>

<script src="{{ 'validate-string-date.js' | asset_url }}" defer="defer"></script>
<script type="text/javascript" src="//www.klaviyo.com/media/js/public/klaviyo_subscribe.js"></script>
<script type="text/javascript">
  // Create a reusable form handler that works with different form containers
  function createFormHandler(formContainerId, formId, options = {}) {
    const defaults = {
      formSelector: `#${formId}`,
      emailSelector: `#${formId} input[name='email']`,
      birthdayMonthSelector: `#${formId} #birthdayMonth`,
      birthdayDaySelector: `#${formId} #birthdayDay`,
      birthdayYearSelector: `#${formId} #birthdayYear`,
      shoppingForSelector: `#${formId} input[name='shopping_for']:checked`,
      birthdayInputSelector: `#${formId} .birthday-input`,
      shoppingPreferenceSelector: `#${formId} .shopping-preference`,
      birthdayHiddenSelector: `#${formId} input[name="Birthday"]`,
      shoppingForHiddenSelector: `#${formId} #popup_shopping_for_hidden`,
      headingSelector: `#${formId} h2`,
      submitBtnSelector: `#${formId} .form__actions`,
      hideOnSubmitSelector: `#${formId} .hide_on_submit`,
      successMessageSelector: `#${formId} .success_message`,
      errorMessageSelector: `#${formId} .error_message`,
      customSubmitBtnId: `${formId}SubmitBtn`,
      isModal: false
    };
    
    const config = {...defaults, ...options};
    
    const isEmail = (email) => {
      const regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
      return regex.test(email);
    };

    const validate = (values) => {
      const errors = {};

      if (!values.email) {
        errors.email = "Invalid email address";
      } else if (!isEmail(values.email)) {
        errors.email = "Invalid email address";
      }

      if (!values.birthdayMonth) {
        errors.birthdayMonth = "Invalid birthday";
      } else if (values.birthdayMonth < 1 || values.birthdayMonth > 12) {
        errors.birthdayMonth = "Invalid birthday";
      }

      if (!values.birthdayDay) {
        errors.birthdayDay = "Invalid birthday";
      } else if (values.birthdayDay < 1 || values.birthdayDay > 31) {
        errors.birthdayDay = "Invalid birthday";
      }

      if (!values.birthdayYear) {
        errors.birthdayYear = "Invalid birthday";
      } else if (values.birthdayYear < 1000 || values.birthdayYear > new Date().getFullYear()) {
        errors.birthdayYear = "Invalid birthday";
      }
      
      if (!values.shoppingFor) {
        errors.shoppingFor = "Please select an option";
      }

      return errors;
    };

    const getValues = () => {
      const values = {};
      values.email = $(config.emailSelector).val();
      values.birthdayMonth = $(config.birthdayMonthSelector).val();
      values.birthdayDay = $(config.birthdayDaySelector).val();
      values.birthdayYear = $(config.birthdayYearSelector).val();
      values.shoppingFor = $(config.shoppingForSelector).val();
      return values;
    };

    const renderErrors = (errors) => {
      // Remove existing error messages
      $(config.emailSelector).next('.input-error-message:first').remove();
      $(config.birthdayInputSelector).next('.input-error-message:first').remove();
      $(config.shoppingPreferenceSelector).next('.input-error-message:first').remove();

      // Add new error messages
      if (errors.email) {
        $(`<span class="input-error-message">${errors.email}</span>`).insertAfter(config.emailSelector);
      }
      if (errors.birthdayMonth || errors.birthdayDay || errors.birthdayYear) {
        $(`<span class="input-error-message">Please enter a valid birthday</span>`).insertAfter(config.birthdayInputSelector);
      }
      if (errors.shoppingFor) {
        $(`<span class="input-error-message">${errors.shoppingFor}</span>`).insertAfter(config.shoppingPreferenceSelector);
      }
    };

    const passValuesToHiddenInputs = () => {
      let month = parseInt($(config.birthdayMonthSelector).val());
      let day = parseInt($(config.birthdayDaySelector).val());
      const year = $(config.birthdayYearSelector).val();
      
      // Format month and day with leading zeros if needed
      month = month < 10 ? '0' + month : month;
      day = day < 10 ? '0' + day : day;
      
      if (month && day && year) {
        const formattedDate = month + '/' + day + '/' + year;
        $(config.birthdayHiddenSelector).val(formattedDate);
      }
      
      const shoppingFor = $(config.shoppingForSelector).val();
      if (shoppingFor) {
        $(config.shoppingForHiddenSelector).val(shoppingFor);
      }
    };

    const handleSuccess = () => {
      $(config.headingSelector).hide();
      $(config.submitBtnSelector).hide();
      $(config.hideOnSubmitSelector).hide();
      $(config.successMessageSelector).css('display', 'flex');
    };

    const handleError = (error) => {
      $(config.errorMessageSelector).html("There was an error with your submission. Please try again.").show();
    };

    const initForm = () => {
      // Initialize Klaviyo for modal forms if needed
      if (config.isModal) {
        KlaviyoSubscribe.attachToModalForm(config.formSelector, {
          delay_seconds: 0.01,
          success: function ($form) {
            handleSuccess();
          },
          custom_success_message: true
        });
      }

      // Attach click handler to the submit button
      $(`#${config.customSubmitBtnId}`).click(function(event) {
        event.preventDefault();
        
        // Validate form inputs
        const errors = validate(getValues());
        renderErrors(errors);
        
        // If no errors, submit the form
        if ($.isEmptyObject(errors)) {
          passValuesToHiddenInputs();
          
          $.ajax({
            type: "POST",
            url: "//manage.kmail-lists.com/ajax/subscriptions/subscribe",
            data: $(config.formSelector).serialize(),
            success: function(response) {
              handleSuccess();
            },
            error: function(xhr, status, error) {
              handleError(error);
            }
          });
        }
      });
      
      // Add input listeners for validation and formatting
      $(config.birthdayMonthSelector).on('input', function() {
        const val = $(this).val();
        if (val.length >= 2) {
          $(config.birthdayDaySelector).focus();
        }
        if (parseInt(val) > 12) {
          $(this).val(12);
        }
      });
      
      $(config.birthdayDaySelector).on('input', function() {
        const val = $(this).val();
        if (val.length >= 2) {
          $(config.birthdayYearSelector).focus();
        }
        if (parseInt(val) > 31) {
          $(this).val(31);
        }
      });
      
      $(config.birthdayYearSelector).on('input', function() {
        const val = $(this).val();
        const currentYear = new Date().getFullYear();
        if (val.length > 4) {
          $(this).val(val.substring(0, 4));
        }
        if (parseInt(val) > currentYear) {
          $(this).val(currentYear);
        }
      });
    };

    return {
      init: initForm,
      handleSuccess,
      handleError,
      validate,
      getValues,
      renderErrors,
      passValuesToHiddenInputs
    };
  }

  document.addEventListener('DOMContentLoaded', function() {
    const footerFormHandler = createFormHandler('footerForm', 'footerForm');
    footerFormHandler.init();
  });
</script>