<!DOCTYPE html>
<html lang="{{ locale }}" dir="{{ direction }}"
  class="{{ checkout_html_classes }}">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport"
    content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0">
  <meta name="referrer" content="origin">

  <title>{{ page_title }}</title>

  {{ content_for_header }}

  {{ checkout_stylesheets }}
  {{ checkout_scripts }}

  {{ 'checkout.css' | asset_url | stylesheet_tag }}
  {{ 'survey-popup.css' | asset_url | stylesheet_tag }}
  {% include 'friendbuy' %}
</head>

<body>
  {{ skip_to_content_link }}

  <header class="banner" data-header role="banner">
    <div class="wrap">
      {{ content_for_logo }}
    </div>
  </header>

  {{ order_summary_toggle }}
  <div class="content" data-content>
    <header class="main__header" role="banner">
      {{ content_for_logo }}
    </header>
    <div class="wrap__header">
      <h2 class="checkout__title">Checkout</h2>
    </div>
    <div class="wrap">
      <div class="main">
        <main class="main__content" role="main">
          {{ content_for_layout }}
        </main>
      </div>
      <aside class="sidebar" role="complementary">
        <div class="sidebar__header">
          {{ content_for_logo }}
        </div>
        <h2 class="section__title">Order Summary</h2>
        <div class="sidebar__content">
          {{ content_for_order_summary }}
        </div>
      </aside>
    </div>
  </div>

  {{ tracking_code }}
</body>

</html>

<script>
  const productDescriptionProperty = document.getElementsByClassName("product__description__property order-summary__small-text");
  Array.from(productDescriptionProperty).forEach(child => {
    if (child.innerText.includes("prescription id:")) {
      child.style.display = "none";
    }
  });

  const emailOrPhone = document.getElementById("checkout_email_or_phone");

  let customerEmail = emailOrPhone?.value ?? "";

  if (customerEmail) {
    emailOrPhone.oninput = function ({ target }) {
      const value = target.value;
      let regexEmail = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
      customerEmail = value.match(regexEmail) ? value : "";
    }
  }


  const checkoutReductionInput = document.getElementById("checkout_reduction_code");
  const discountCodeApply = document.querySelector(".order-summary__section--discount .field__input-btn");

  const customerEmailRegExp = /\(([^)]+)\)/;
  const customerEmailQuery = document.querySelector("[data-rtl-ensure]")?.innerText;
  const regExpValue = customerEmailRegExp.exec(customerEmailQuery);
  const email = regExpValue ? regExpValue[1] : "";

  customerEmail = email ? email : customerEmail;

  let timer;

  checkoutReductionInput.addEventListener('input', listenDiscountOnInput);

  function listenDiscountOnInput({ target }) {
    clearTimeout(timer);
    timer = setTimeout(function () {
      validateCode(target.value);
    }, 500);
  }

  function validateCode(value) {
    const clientId = "95jgnvudiht03075kdhfrw256789dhif";
    const emailAddress = customerEmail;
    const url = `https://www.sunniessystems.com/api/3.0/324566/promo-code/?client_id=${clientId}&email_address=${emailAddress}&promo_code=${value}`;

    if (!!customerEmail) {
      fetch(url, {
        method: "GET",
        headers: {
          'oassis-api-key': '052398FSOWRI2UR7FHJKG789403JHFSA'
        }
      })
        .then(async (res) => {
          const response = await res.json();
          const isValid = !response.length;

          isValid ? enableDiscountBtn() : disableDiscountBtn();
        })
        .catch(err => console.error(err));
    }
  }

  function disableDiscountBtn() {
    discountCodeApply.classList.add("btn--disabled");
    discountCodeApply.disabled = true;
  }

  function enableDiscountBtn() {
    discountCodeApply.classList.remove("btn--disabled");
    discountCodeApply.disabled = false;
  }

  const GrabPayPayment = Array.from(document.getElementsByClassName("offsite-payment-gateway-logo"))?.find(Boolean)?.parentNode;

  const paymentMethodsElements = document.querySelectorAll(".radio__label__primary")
  paymentMethodsElements.forEach((paymentElement) => {
    if (paymentElement.innerText === "Grabpay") {
      paymentElement.textContent = "PayPal"
    } else if (paymentElement.innerText === "Cards, Maya, GCash, QRPH & other wallets") {
      paymentElement.textContent = "Credit or Debit Cards via Maya"
    }
  })
</script>
<script>

  function renderSurvey(grapevineParentEl){
    function createPopup(){
      const tempContainer = document.createElement("div")
      tempContainer.innerHTML = `
        <div id="survey-popup" class="survey-popup">
          <div class="survey-popup__content">
            <span class="survey-popup__close">
              <img src="{{ 'close-icon.svg' | asset_url }}" alt="Close" />
            </span>
            <div>
              <img alt="survey image" />
              <div class="survey-popup__form">
                <h3>Thank you.</h3>
                <div class="survey-popup__grapevine-container"></div>
                <small>*Terms and conditions apply</small>
                <a href="https://ph.sunniesstudios.com/pages/sunnies-guarantee">Learn more</a>
              </div>
            </div>
          </div>
        </div>
      `
      document.body.appendChild(tempContainer.firstElementChild)

      const closeBtn = document.querySelector(".survey-popup__close")
      closeBtn.addEventListener('click', ()=>{
        document.getElementById("survey-popup").style.display = "none"
      })
    }

    function moveGrapevineToPopup(){
      const grapevine = document.getElementById("grapevine-form")
      const surveyPopupForm = document.querySelector(".survey-popup__grapevine-container")
      surveyPopupForm.appendChild(grapevine)
    }
    function disablePointerEventsOnSubmit(){
      const submitBtn = document.getElementById("hdyh_submit_button")
      submitBtn.addEventListener('click', ()=>{
        submitBtn.style.pointerEvents = 'none'
      })    
    }
    const grapevineObserver = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'childList') {
          for (const node of mutation.addedNodes) {
            if(node.id === "grapevine-form"){
              createPopup()
              moveGrapevineToPopup()
              disablePointerEventsOnSubmit()
            }
          }
        }
      }
    })
    
    // Start observing the container div for changes
    grapevineObserver.observe(grapevineParentEl, { childList: true })
  }
  
  document.addEventListener("DOMContentLoaded", function() { 
    const thankyouPageContent = document.querySelector("[data-step='thank_you'] .section__content")
    if(thankyouPageContent){
      renderSurvey(thankyouPageContent)
    }
  })

</script>