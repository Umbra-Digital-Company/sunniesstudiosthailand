<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.css' rel='stylesheet' />

<div class="store-locations">
  <div class="store-locations__actions-desktop">
    <h1>{{ page.title }}</h1>
    <div class="action-pane">
      <div class="action-pane__search">
        <img src="{{ 'search-icon.svg' | asset_url }}" id="search-btn" />
        <input placeholder="Search by city, province, or area code">
        <img src="{{ 'paper-plane.svg' | asset_url }}" id="nearby-stores-btn" />
      </div>
      <button type="button" id="filter-opener-btn">Filters</button>
    </div>
    <div class="tabs">
      <nav class="tabs__list">
        <button class="tabs__tab active" data-tab-value="map">Map</button>
        <button class="tabs__tab" data-tab-value="list">List</button>
      </nav>
      <div class="tabs__views">
        <div id="tab-view-map" class="tabs__view active" >
          <div class="tabs__view-map-container">
            <div id="stores-map" class="stores-map"></div>
          </div>
          <ul class="tabs__view-store-list"></ul>
        </div>
        <div id="tab-view-list" class="tabs__view">
          <div class="tabs__view-breadcrumbs">
            <button onClick="handleClickAllStores()">All stores</button>
            <span> / </span>
            <button class="tabs__view-breadcrumbs-current">Metro Manila</button>
          </div>
          <ul class="tabs__view-list"></ul>
        </div>
      </div>
    </div>
  </div>
  <div class="store-locations__map-desktop"></div>
</div>

<div class="store-locations-filter">
  <div class="store-locations-filter__drawer">
    <div class="store-locations-filter__content">
      <div class="store-locations-filter__title">
        <p>Filters</p>
        <img src="{{ 'close-icon.svg' | asset_url }}" alt="Close" id="filter-close-btn" />
      </div>
      <form id="filter-form">
        <div class="store-locations-filter__filter-groups scroll-none">
          <div class="store-locations-filter__filter-group">
            <p>Products</p>
            <div>
              {% assign products_filters_array = section.settings.products_filters | split: ", " %}
              {% for products_filter in products_filters_array  %}
                <label for="{{ products_filter | handleize }}" class="store-locations-filter__filter-item">
                  <span>{{ products_filter }}</span>
                  <input type="checkbox" name="products" id="{{ products_filter | handleize }}" value="{{ products_filter }}" />
                </label>
              {% endfor %}
            </div>
          </div>
      
          <div class="store-locations-filter__filter-group">
            <p>Services</p>
            <div>
              {% assign services_filters_array = section.settings.services_filters | split: ", " %}
              {% for services_filter in services_filters_array  %}
                <label for="{{ services_filter | handleize }}" class="store-locations-filter__filter-item">
                  <span>{{ services_filter }}</span>
                  <input type="checkbox" name="services" id="{{ services_filter | handleize }}" value="{{ services_filter }}" />
                </label >
              {% endfor %}
            </div>
          </div>
          
          <div class="store-locations-filter__filter-group">
            <p>Store type</p>
            <div>
              {% assign store_type_filters_array = section.settings.store_type_filters | split: ", " %}
              {% for store_type_filter in store_type_filters_array  %}
                <label for="{{ store_type_filter | handleize }}" class="store-locations-filter__filter-item">
                  <span>{{ store_type_filter }}</span>
                  <input type="checkbox" name="store-types" id="{{ store_type_filter | handleize }}" value="{{ store_type_filter }}" />
                </label>
              {% endfor %}
            </div>
          </div>
        </div> 
    
        <div class="store-locations-filter__filter-actions">
          <button type="button" id="filter-clear-btn">Clear</button>
          <button type="submit">Apply</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  $(window).on("scroll", function (evt) {
  const scrollY = evt.currentTarget.scrollY;

    if (scrollY >= 1) {
        $(".header").css({position:"fixed"});
        $(".store-locations").css({ marginTop:$(".header").height()});
    } else {
        $(".header").css({position:"relative"});
        $(".store-locations").css({marginTop:"0px"});
    }
});
</script>
      
<style>

  
#{{ page.handle }} .header{
  background: transparent;
  position: relative;
}

#{{ page.handle }} .header.header-is-fixed,
#{{ page.handle }} .header:hover{
  background: #fff;
}

.store-locations {
    /* margin-top: 60px; */
  }
@media (min-width: 768px) {

  #{{ page.handle }} .header
  {
    background: transparent;
  }

  #{{ page.handle }} .header.header-is-fixed,
  #{{ page.handle }} .header:hover
  {
    background: #fff;
  }
}
  h1 {
    margin: 0;
    font-family: 'AT Surt Medium';
    font-size: 28px;
    padding: 0 16px;
    margin-top: 24px;
  }

  .action-pane {
    display: flex;
    flex-direction: column;
    gap: 24px;
    padding: 0 16px;
    margin-top: 24px;
  }
  .action-pane__search {
    border-bottom: 1.5px solid var(--black_color);
    display: flex;
    gap: 4px;
  }
  .action-pane__search > input {
    width: 100%;
    margin: 0;
    padding: 16px 8px;
    text-transform: unset;
    font-family: 'Radio Grotesk';
  }
  .action-pane__search > img {
    cursor: pointer;
  }
  .action-pane__search > input::placeholder {
    font-size: 14px;
    text-transform: unset;
    font-family: 'AT Surt Medium';
    color: var(--gray_color);
  }
  .action-pane button {
    width: max-content;
    border: 1.5px solid var(--light_gray_color);
    border-radius: 8px;
    background: none;
    padding: 16px;
    font-family: 'AT Surt Medium';
    font-size: 14px;
    position: relative;
    line-height: 100%;
  }
  .action-pane button.active-filter {
    background-color: var(--light_gray_color);
  }
  .tabs {
    margin-top: 24px;
  }
  .tabs__list {
    display: flex;
    border-top: 1.5px solid var(--light_gray_color);
  }
  .tabs__list > button {
    width: 100%;
    font-family: 'AT Surt Medium';
    font-size: 14px;
    background: none;
    border: none;
    border-bottom: 1.5px solid transparent;
    padding: 16px;
  }
  .tabs__list > button.active {
    border-bottom: 1.5px solid var(--black_color);
  }
  .tabs__view {
    display: none;
  }
  .tabs__view.active {
    display: block;
  }
  .tabs__view-list {
    display: block;
  }
  .tabs__view-breadcrumbs {
    font-family: 'AT Surt Medium';
    font-size: 14px;
    padding: 16px;
    border-top: 1.5px solid var(--light_gray_color);
    background-color: #F7F7F7;
    display: none;
    white-space: nowrap;
  }
  .tabs__view-breadcrumbs > button:last-child:not(:first-child) {
    font-family: 'AT-Surt-Semibold';
    cursor: unset;
    white-space: nowrap;
    text-overflow: ellipsis;
    width: 80%;
    overflow: hidden;
    text-align: left;
  }
  .tabs__view-breadcrumbs > button {
    border: none;
    background: none;
  }
  .tabs__view-breadcrumbs > button > span {
    font-family: 'Radio Grotesk';
  }
  .tabs__view-map-container {
    width: 100%;
    padding-bottom: 100%;
    position: relative;
  }
  .tabs__view-store-list {
    max-height: 400px;
    overflow-y: auto;
  }
  .stores-map {
    position: absolute;
    width: 100%;
    height: 100%;
  }
  .list-region {
    display: flex;
    align-items: center;
    padding: 16px;
    border-top: 1.5px solid var(--light_gray_color);
    cursor: pointer;
  }
  .list-region > h2 {
    font-family: 'AT Surt Medium';
    font-size: 18px;
    margin-bottom: 0;
  }
  .list-region > span {
    margin-left: 12px;
    font-size: 10px;
    font-family: 'AT Surt Medium';
  }
  .list-region > img {
    margin-left: auto;
  }
  .list-region__count {
    display: flex;
    height: 31px;
    min-width: 31px;
    align-items: center;
    justify-content: center;
    border-radius: 100%;
    background-color: #F7F7F7;
    padding: 2px;
    line-height: 100%;
  }
  .list-no-result {
    padding: 16px;
    font-family: 'Radio Grotesk';
    border-top: 1.5px solid var(--light_gray_color);
  }
  .list-store {
    padding: 24px 16px;
    border-top: 1.5px solid var(--light_gray_color);
    cursor: pointer;
  }
  .list-store--no-link {
    pointer-events: none;
  }
  .list-store > a {
    display: flex;
    width: 100%;
    text-decoration: none;
    color: unset;
    justify-content: space-between;
  }
  .list-store > a > div > h2 {
    font-family: 'AT surt Medium';
    font-size: 18px;
  }
  .list-store > a > div > .list-store__products {
    font-family: 'Radio Grotesk';
    font-size: 12px;
    margin-top: 12px;
    color: #959190;
  }
  .list-store > a > div > .list-store__time {
    font-family: 'Radio Grotesk';
    font-size: 12px;
    margin-top: 4px;
    color: #959190;
  }
  .list-store > a > div > .list-store__time > span {
    color: #9BA17B;
    font-family: 'AT-Surt-SemiBold';
  }
  .list-store > a > div > .list-store__time > span.closed {
    color: #B44720;
  }
  .list-store > img {
    margin-left: auto;
  }
  .store-location__popup-heading {
    font-size: 14px;
    font-family: 'AT-Surt-SemiBold';
  }
  .store__marker-popup-direction {
    color: var(--neutral_four_color);
    margin-top: 8px;
    display: inline-block;
  }
  .store-locations__map-desktop {
    position: relative;
    width: 100%;
  }
  .mapboxgl-popup-close-button {
    padding: 0 4px;
    font-size: 20px;
  }
  #tab-view-list {
    position: relative;
    min-height: 40px;
  }
  #tab-view-list.loading > * {
    display: none;
  }
  #tab-view-list.loading:after {
    display: inline-block;
    content: "";
    border: 1.5px solid #efefec;
    border-radius: 50%;
    border-top: 1.5px solid #352b27;
    border-right: 1.5px solid #352b27;
    border-bottom: 1.5px solid #352b27;
    width: 14px;
    height: 14px;
    -webkit-animation: spin 1s linear infinite;
    animation: spin 1s linear infinite;
    position: absolute;
    left: 50%;
    top: 12px;
  }
  /* Safari */
  @-webkit-keyframes spin {
    0% { -webkit-transform: rotate(0deg); }
    100% { -webkit-transform: rotate(360deg); }
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .store-locations-filter {
    position: fixed;
    width: 100%;
    height: 100%;
    z-index: 60;
    background-color: rgba(0,0,0,0.4);
    width: 0;
    right: 0;
  }
  .store-locations-filter.active {
    width: 100%;
  }
  .store-locations-filter__drawer {
    height: 100%;
    overflow: hidden;
    width: 480px;
    transition: transform 300ms;
    float: right;
    transform: translateX(100%);
  }
  .store-locations-filter.active > .store-locations-filter__drawer {
    width: 100%;
    transform: translateX(0);
  }
  .store-locations-filter__content {
    width: 100vw;
    height: 100%;
    background-color: #fff;
    position: relative;
    display: flex;
    flex-direction: column;
    font-size: 14px;
  }
  .store-locations-filter__title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 12px 12px 16px;
    border-bottom: 1.5px solid var(--light_gray_color);
  }
  .store-locations-filter__title > p {
    font-family: 'AT Surt Medium';
    font-size: 20px;
  }
  .store-locations-filter__title > img {
    height: 40px;
    width: 40px;
    padding: 12px;
    object-fit: contain;
    cursor: pointer;
  }
  .store-locations-filter__content > form {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .store-locations-filter__filter-groups {
    flex-grow: 1;
    overflow: auto;
  }
  .scroll-none::-webkit-scrollbar {
    width: 0px;
  }
  .store-locations-filter__filter-group {
    padding: 24px 16px;
    border-bottom: 1.5px solid var(--light_gray_color);
  }
  .store-locations-filter__filter-group > p {
    font-family: 'AT-Surt-SemiBold';
  }
  .store-locations-filter__filter-group > div {
    display: flex;
    margin-top: 16px;
    gap: 8px;
    flex-flow: wrap;
  }
  .store-locations-filter__filter-item {
    font-family: 'AT Surt Medium';
    padding: 16px 20px;
    border: 1.5px solid var(--light_gray_color);
    border-radius: 8px;
    line-height: 100%;
  }
  .store-locations-filter__filter-item > input {
    display: none;
  }
  .store-locations-filter__filter-item:has(> input:checked) {
    background-color: var(--light_gray_color);
  }
  .store-locations-filter__filter-actions {
    padding: 40px 0;
    display: flex;
    justify-content: center;
    gap: 16px;
    flex-shrink: 0;
    font-family: 'Radio Grotesk';
  }
  .store-locations-filter__filter-actions > button:first-child {
    padding: 16px 40px;
    background: none;
    border: 1.5px solid var(--black_color);
    border-radius: 8px;
  }
  .store-locations-filter__filter-actions > button:last-child {
    padding: 16px 40px;
    background: none;
    border: 1.5px solid var(--black_color);
    border-radius: 8px;
    background-color: var(--black_color);
    color: #fff;
    font-family: 'AT Surt Medium';
  }
  .store-locations-filter__filter-actions > button:last-child:hover {
    background: none;
    border: 1.5px solid var(--black_color);
    color: var(--black_color);
  }

  @media only screen and (min-width: 1025px){
    h1 {
      font-size: 40px;
      padding: 0 24px;
    margin-top: 24px;
    }
    .store-locations {
      display: flex;
      /* margin-top: 120px; */
    }
    .store-locations__actions-desktop {
      width: 100%;
      max-width: 480px;
    }
    .action-pane {
      padding: 0 24px;
    }
    .action-pane__search > input, .action-pane button {
      font-size: 16px;
    }
    .list-region {
      padding: 24px;
    }
    .list-region:hover {
      background-color: var(--light_gray_color);
    }
    .list-region > h2 {
      font-size: 20px;
    }
    .list-region > span {
      font-size: 12px;
    }
    .tabs__list {
      display: none;
    }
    .list-no-result {
      padding: 16px 24px;
    }
    .tabs__view-breadcrumbs {
      font-size: 16px;
      padding: 16px 24px;
    }
    .list-store {
      padding: 24px;
    }
    .list-store:hover {
      background-color: var(--light_gray_color);
    }
    .list-store > a > div > h2 {
      font-size: 20px;
      margin-bottom: 0;
    }
    .list-store > a > div > .list-store__products, .list-store > a > div > .list-store__time {
      font-size: 14px;
    }
    #tab-view-list {
      display: block;
      height: 500px;
      overflow-y: auto;
    }
    #tab-view-map {
      display: none;
    }
    .store-locations-filter.active > .store-locations-filter__drawer {
      width: unset;
      transform: translateX(0);
    }
    .store-locations-filter__content {
      width: 480px;
      float: right;
      font-size: 16px;
    }
    .store-locations-filter__filter-item:hover {
      background-color: var(--light_gray_color);
    }
  }
</style>
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js'></script>
<script src='https://unpkg.com/@turf/turf@6/turf.min.js'></script>

<script id="stores-data" type="application/json">
 {
  "stores": [
    {%- paginate page.metafields.stores.list.value by 1000 -%}
    {%- for store in page.metafields.stores.list.value -%}
    {%- assign services_array = store.services.value | map: "name" -%}
    {%- assign services = services_array | json -%}
    {%- assign products_array = store.products | split: ", " -%}
    {%- assign products = products_array | json -%}
    {
      "storeCode": {{ store.store_code }},
      "name": "{{ store.name }}",
      "region": "{{ store.region }}",
      "address": "{{ store.address }}",
      "coordinates": {{ store.coordinates }},
      "products": {{ products }},
      "services": {{ services }},
      "storeType": "{{ store.store_type }}",
      "businessHours": {{ store.business_hours_json_format }},
      "pageUrl": "{{ store.page_url }}"
    }{%- unless forloop.last -%},{%- endunless -%}
    {%- endfor -%}{%- endpaginate -%}]
  }
</script>
<script>

  const storesData = JSON.parse($("#stores-data").text())
  const stores = storesData.stores
  let storesCurrentState = [...stores]
  
  const DEFAULT_COORDINATES = [121.77401699999996, 12.879721]
  const isDesktop = window.matchMedia('(min-width: 1024px)').matches
  let currentLocationMarker;
  let userNavigatedMap = false
  
  mapboxgl.accessToken = 'pk.eyJ1Ijoid2hvaXNueWwiLCJhIjoiY2xlcnZib2tnMTAwZjN4dGtzY2N0Y3BuNyJ9.fOICGKpp4O3dae21UqwRvg';

  const map = new mapboxgl.Map({
    container: 'stores-map',
    style: 'mapbox://styles/mapbox/light-v11',
    center: DEFAULT_COORDINATES,
    zoom: 4,
    cooperativeGestures: true
  });

  function renderMapData(stores){
    // Remove all layers and sources
    removeMapData()
    
    const storesPointsGeojson = stores.map(function(store, i) {
      return {
          type: 'Feature',
          id: i,
          geometry: {
              type: 'Point',
              coordinates: store.coordinates
          },
          properties: {
            storeCode: store.storeCode,
            name: store.name,
            coordinates: store.coordinates,
            address: store.address
          }
      };
    })

    map.addSource('markers', {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: storesPointsGeojson
      },
      cluster: true,
      clusterMaxZoom: 25,
      clusterRadius: 50
    })

    map.addLayer({
      id: 'clusters',
      type: 'circle',
      source: 'markers',
      filter: ['has', 'point_count'],
      paint: {
        'circle-color': '#333333',
        'circle-radius': 20,
        'circle-stroke-width': 4,
        'circle-stroke-color': 'rgba(128, 128, 128, 0.5)'
      }
    })

    map.addLayer({
      id: 'cluster-count',
      type: 'symbol',
      source: 'markers',
      filter: ['has', 'point_count'],
      layout: {
        'text-field': '{point_count_abbreviated}',
        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-size': 12
      },
      paint: {
        'text-color': '#fff'
      }
    })

    map.addLayer({
      id: 'unclustered-point',
      type: 'symbol',
      source: 'markers',
      filter: ['!', ['has', 'point_count']],
      layout: {
        'icon-image': 'custom-marker',
        'icon-size': 0.7,
        'icon-anchor': 'bottom',
        'text-field': '{title}',
        'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
        'text-offset': [0, 0.6]
      }
    })
      
    map.on('click', 'clusters', handleClickCluster);
    map.on('click', 'unclustered-point', handleClickUnclusteredPoint);
    map.on('mouseenter', 'clusters', handleMouseenter);
    map.on('mouseleave', 'clusters', handleMouseleave);
    map.on('mouseenter', 'unclustered-point', handleMouseenter);
    map.on('mouseleave', 'unclustered-point', handleMouseleave);
    map.on('moveend', handleMoveend)   
  }
  
  function handleClickCluster(e) {
    userNavigatedMap = true
    const features = map.queryRenderedFeatures(e.point, {
      layers: ['clusters']
    });

    const clusterId = features[0].properties.cluster_id;
    const pointCount = features[0].properties.point_count;
    const clusterSource = map.getSource('markers').getClusterExpansionZoom(clusterId)
    map.getSource('markers').getClusterExpansionZoom(
      clusterId,
      function(err, zoom) {
        if (err) return;

        map.easeTo({
          center: features[0].geometry.coordinates,
          zoom: zoom
        });
      }
    );
  }
  function handleClickUnclusteredPoint(e) {

    const features = e.features
    const coordinatesByClick = e.lngLat
    const coordinates = JSON.parse(features[0].properties.coordinates)

    if(map.getZoom() <= 9){
      userNavigatedMap = true
      map.flyTo({
        center: coordinates,
        zoom: 10,
        duration: 1000
      });
    }else{
      // create HTML content for the popup
      const popupContent = `<h3 class="store-location__popup-heading">${features[0].properties.name}</h3>
                            <p>${features[0].properties.address}</p>
                            <a class="store__marker-popup-direction" href="https://www.google.com/maps/dir/?api=1&destination=${coordinates[1]}, ${coordinates[0]}" target="_blank">Directions</a>
                            `
  
      // create the popup
      const popup = new mapboxgl.Popup()
        .setLngLat(coordinatesByClick)
        .setHTML(popupContent)
        .addTo(map);
      map.on('closeAllPopups', () => {
        popup.remove();
      });
    }
  }
  function handleMouseenter() {
      map.getCanvas().style.cursor = 'pointer';
  }
  function handleMouseleave() {
      map.getCanvas().style.cursor = '';
  }
  async function handleMoveend(e) {
    // Close all popups
    map.fire("closeAllPopups")

    userNavigatedMap = userNavigatedMap || (e.originalEvent && e.originalEvent.type !== "resize")

    if(userNavigatedMap){
      const storesWithinMap = await getStoresWithinMap(stores)
      renderStoresByMapNavigation(storesWithinMap)
      renderStoreListMobile(storesWithinMap)
      userNavigatedMap = false
    }
  }
  
  function removeMapData(){
    if(map.getLayer("clusters")){
      map.removeLayer('clusters')
    }
    if(map.getLayer("cluster-count")){
      map.removeLayer('cluster-count')
    }
    if(map.getLayer("unclustered-point")){
      map.removeLayer('unclustered-point')
    }
    if(map.getSource("markers")){
      map.removeSource('markers')
    }

    map.off('click', 'clusters', handleClickCluster);
    map.off('click', 'unclustered-point', handleClickUnclusteredPoint);
    map.off('mouseenter', 'clusters', handleMouseenter);
    map.off('mouseleave', 'clusters', handleMouseleave);
    map.off('mouseenter', 'unclustered-point', handleMouseenter);
    map.off('mouseleave', 'unclustered-point', handleMouseleave); 
    map.off('moveend', handleMoveend)  
  }
  
  // Listeners
  $(".tabs__tab").click(function(e){
    changeTabMobile($(this).data("tabValue"))
  })
  $("#nearby-stores-btn").click(handleClickNearByStores)
  $("#filter-opener-btn").click(openFilter)
  $("#filter-clear-btn").click(handleClickClearFilter)
  $("#filter-close-btn").click(closeFilter)
  $(".store-locations-filter").click(function(e){
    if(e.currentTarget === e.target){
      closeFilter()
    }
  })
  $("#search-btn").click(handleSubmitSearch)
  $(".action-pane__search > input").keypress(function(e){
    if (e.which == 13) { 
        $(this).blur()
        handleSubmitSearch()
      }
  });
  $("#filter-form").submit(function(e){
    handleClickApplyFilter(e)
  })
  window.addEventListener('popstate', function () {
     renderPageByUrl(storesCurrentState)
  });

  function getNearbyStores(stores, coordinates){
    const centerPointGeojson = turf.point(coordinates)
    // Create a buffer/zone around center point's location with a radius of 100 km
    const bufferOptions = { units: 'kilometers' }
    const bufferDistance = 100
    const centerPointZone = turf.buffer(centerPointGeojson, bufferDistance, bufferOptions);

    // Filter the stores array to include only those within the buffer/zone
    const storesPointsGeojson = stores.map(function(store, i) {
      return {
          type: 'Feature',
          id: i,
          geometry: {
              type: 'Point',
              coordinates: store.coordinates
          },
          properties: {
            storeCode: store.storeCode,
            name: store.name,
            coordinates: store.coordinates,
            address: store.address
          }
      };
    })
    const storesWithinZoneGeojson = storesPointsGeojson.filter((store) => {
      return turf.booleanPointInPolygon(store, centerPointZone)
    });
    // Sort the stores array based on distance from center point
    const sortedStores = turf.featureCollection(storesWithinZoneGeojson).features.sort((a, b) => {
      const distanceToA = turf.distance(centerPointGeojson, a)
      const distanceToB = turf.distance(centerPointGeojson, b)
      return distanceToA - distanceToB
    });

    return storesPointsGeojsonToStores(stores, sortedStores)
  }

  function storesPointsGeojsonToStores(stores, pointsGeojson){
    const pointsGeojsonPropertyNames = pointsGeojson.map(pointGeojson => pointGeojson.properties.name)
    const sortedStores = []
    pointsGeojsonPropertyNames.forEach(pointGeojsonPropertyName => {
      const foundstore = stores.find(store => store.name === pointGeojsonPropertyName)
      if (foundstore) {
        sortedStores.push(foundstore);
      }
    });
    return sortedStores;
  }
  
  async function getStoresWithinMap(stores){
    const unclusteredPoints = map.queryRenderedFeatures({ layers: ["unclustered-point"] })
    const clusters = map.queryRenderedFeatures({ layers: ["clusters"] })
    const uniqueClusters = clusters.reduce(function (acc, feature) {
      const matchingIndex = acc.findIndex(function (existingFeature) {
        return existingFeature.id === feature.id;
      });
      if (matchingIndex === -1) {
        acc.push(feature);
      }
      return acc;
    }, []);

    let unclusteredPointsNames = []
    const features = uniqueClusters.concat(unclusteredPoints)
    for(const feature of features){
      if(feature.layer.id === 'clusters'){
        const clusterFeatures = await getClusterLeavesAsync(feature)
        clusterFeatures.forEach(clusterFeature => {
          unclusteredPointsNames.push(clusterFeature.properties.name)
        })
      }else{
        unclusteredPointsNames.push(feature.properties.name)
      }
    }
    return stores.filter(store => unclusteredPointsNames.includes(store.name))
  }
  
  // Convert getClusterLeaves to async/await function
  function getClusterLeavesAsync(cluster) {
    const clusterId = cluster.properties.cluster_id;
    const pointCount = cluster.properties.point_count;
    return new Promise(resolve => {
      map.getSource('markers').getClusterExpansionZoom(clusterId).getClusterLeaves(clusterId, pointCount, 0, (error, features) => {
        resolve(features)
      });
    });
  }   
  
  function changeTabMobile(tab){
    const tabEl = $(`[data-tab-value="${tab}"]`)
    tabEl.siblings().removeClass("active")
    tabEl.addClass("active")
    
    const tabViewId = `#tab-view-${tabEl.data("tabValue")}`
    $(tabViewId).siblings().removeClass("active")
    $(tabViewId).addClass("active")
  }

  function renderPageByUrl(stores){
    const searchParams = new URLSearchParams(window.location.search)

    const search = searchParams.get('search')
    const region = searchParams.get('region')
    const nearby = searchParams.get('nearby')
    
    if(search){
      renderStoresBySearch(stores, search)
    }else if(region){
      renderStoresByRegion(stores,region)
    }else if(nearby){
      renderStoresNearby(stores, nearby)
    }else{
      renderRegions(stores)
      renderStoreListMobile(stores)
    }
  }
  
  function renderRegions(stores){
    const regions = Object.values(stores.reduce((acc, store) => {
      if (!acc[store.region]) {
        acc[store.region] = { name: store.region, count: 1 }
      } else {
        acc[store.region].count++
      }
      return acc
    }, {}))

    renderRegionList(regions)
    
    $(".tabs__view-breadcrumbs").hide()

    map.flyTo({
      center: DEFAULT_COORDINATES,
      zoom: 4,
      duration: 1000
    });
    
  }

  function renderStoresBySearch(stores, keyword){
    $(".action-pane__search > input").val(keyword)

    $(".tabs__view-breadcrumbs-current").text(`Search: ${keyword}`)
    $(".tabs__view-breadcrumbs").show()

    changeTabMobile("list")
    
    const filteredStores = stores.filter(obj =>
        Object.values(obj).some(val =>
            val.toString().toLowerCase().includes(keyword.toLowerCase())
        )
    )

    if(filteredStores.length){
      renderStoreList(filteredStores)
      renderStoreListMobile(filteredStores)
      
      map.flyTo({
        center: filteredStores[0].coordinates,
        zoom: 10,
        duration: 1000
      })
    }else{
      renderStoreList([])
      renderStoreListMobile([])
    }
    
  }

  function renderStoresByRegion(stores, region){
    $(".tabs__view-breadcrumbs-current").text(region)
    $(".tabs__view-breadcrumbs").show()
    
    const filteredStores = stores.filter(store => store.region === region)

    if(filteredStores.length){
      renderStoreList(filteredStores)
      renderStoreListMobile(filteredStores)
      map.flyTo({
        center: filteredStores[0].coordinates,
        zoom: 10,
        duration: 1000
      })
    }
  }

  function renderStoresNearby(stores, coordinates){
    $(".tabs__view-breadcrumbs-current").text("Nearby stores")
    $(".tabs__view-breadcrumbs").show()
    
    const userCoordinates = coordinates.split(",").map(coordinate => Number(coordinate))

    // Make a Geocoding API reverse request
    const url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + userCoordinates[0] + ',' + userCoordinates[1] + '.json?access_token=' + mapboxgl.accessToken;
    fetch(url)
      .then(response => response.json())
      .then(data => {
        const address = data.features[0].place_name;
        setSearchField(address)
      });

    const nearbyStores = getNearbyStores(stores, userCoordinates)
    renderStoreList(nearbyStores)
    renderStoreListMobile(nearbyStores)   
        
    // Create a new marker at the user's location
    const iconEl = document.createElement('div');
    iconEl.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24"><circle cx="12" cy="12" r="8" fill="#007fff" /><circle cx="12" cy="12" r="3" fill="#ffffff" /></svg>';
    if(currentLocationMarker){
      currentLocationMarker.remove()
    }   
    currentLocationMarker = new mapboxgl.Marker({element: iconEl}).setLngLat(userCoordinates).addTo(map)

    map.flyTo({
      center: userCoordinates,
      zoom: 10,
      duration: 1000
    })
  }
  
  function renderRegionList(regions){  
    const listContainer = $(".tabs__view-list")
    listContainer.empty()

    if(!regions.length){
      const tempContainer = $("<div>")
      tempContainer.html(`
        <li class="list-no-result">No results were found.</li>
      `)
      const li = tempContainer.html()
      listContainer.append(li)
      return
    }
    
    $.each(regions, function(index, region) {
      const tempContainer = $("<div>")
      tempContainer.html(`
        <li class="list-region" onClick="handleClickRegion('${region.name}')">
          <h2>${region.name}</h2>
          <span class="list-region__count">${region.count}</span>
          <img src="//cdn.shopify.com/s/files/1/0172/4383/2374/files/right-arrow-map.svg?v=1739424120" />
        </li>
      `)
      const li = tempContainer.html()
      listContainer.append(li)
    })
  }

  function renderStoreList(stores){
    const listContainer = $(".tabs__view-list")
    listContainer.empty()

    if(!stores.length){
      const tempContainer = $("<div>")
      tempContainer.html(`
        <li class="list-no-result">No results were found.</li>
      `)
      const li = tempContainer.html()
      listContainer.append(li)
      return
    }
    
    $.each(stores, function(index, store) {
      const tempContainer = $("<div>")
      tempContainer.html(`
        <li class="list-store ${store.pageUrl ? '' : 'list-store--no-link'}">
          <a href="${store.pageUrl || '#'}" target="_blank">
            <div>
              <h2>${store.name}</h2>
              <h3 class="list-store__products">${store.products.join(", ")}</h3>
              <h3 class="list-store__time">${storeStatus(store.businessHours)}</h3>
            </div>
            ${store.pageUrl ? '<img src="//cdn.shopify.com/s/files/1/0172/4383/2374/files/right-arrow-map.svg?v=1739424120" />': ''}
          </a>
        </li>
      `)
      const li = tempContainer.html()
      listContainer.append(li)
    })
  }
  
  function renderStoreListMobile(stores){
    const listContainer = $(".tabs__view-store-list")
    listContainer.empty()
    
    $.each(stores, function(index, store) {
      const tempContainer = $("<div>")
      tempContainer.html(`
        <li class="list-store ${store.pageUrl ? '' : 'list-store--no-link'}">
          <a href="${store.pageUrl || '#'}" target="_blank">
            <div>
              <h2>${store.name}</h2>
              <h3 class="list-store__products">${store.products.join(", ")}</h3>
              <h3 class="list-store__time">${storeStatus(store.businessHours)}</h3>
            </div>
            ${store.pageUrl ? '<img src="//cdn.shopify.com/s/files/1/0172/4383/2374/files/right-arrow-map.svg?v=1739424120" />': ''}
          </a>
        </li>
      `)
      const li = tempContainer.html()
      listContainer.append(li);
    });
  }
  
  function renderStoresByMapNavigation(stores){
    $(".tabs__view-breadcrumbs-current").text("Map navigation")
    $(".tabs__view-breadcrumbs").show()

    renderStoreList(stores)
    renderStoreListMobile(stores)
  }

  function handleSubmitSearch(){
    const key = $(".action-pane__search > input").val()
    if (window.history.pushState) {
      const newUrl = new URL(window.location.origin + window.location.pathname);
      newUrl.searchParams.set('search', key)
      window.history.pushState({}, '', newUrl);
      dispatchEvent(new PopStateEvent('popstate'));
    }
  }

  function renderFilterOpenerBtn(filterData){
    if(filterData.products?.length || filterData.services?.length || filterData.storeTypes?.length){
      $("#filter-opener-btn").addClass("active-filter")
    }else{
      $("#filter-opener-btn").removeClass("active-filter")
    }
  }

  function handleClickApplyFilter(e){
    e.preventDefault()
    const formData = new FormData(e.target)
    const products = formData.getAll("products").map(product => product.toLowerCase())
    const services = formData.getAll("services").map(service => service.toLowerCase())
    const storeTypes = formData.getAll("store-types").map(storeType => storeType.toLowerCase())
    
    let filterData = {
      products,
      services,
      storeTypes
    }
  
    applyFilter(stores, filterData)
  }

  function handleClickClearFilter(){
    $("#filter-form").get(0).reset()

    storesCurrentState = [...stores]
    
    setSearchField("")
    resetUrl()
    renderFilterOpenerBtn({})
    renderMapData(storesCurrentState)
    renderPageByUrl(storesCurrentState)
    
    closeFilter()
  }

  function handleClickNearByStores(){
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords
        
        if (window.history.pushState) {
          const newUrl = new URL(window.location.origin + window.location.pathname);
          newUrl.searchParams.set('nearby', [longitude,latitude])
          window.history.pushState({}, '', newUrl)
          dispatchEvent(new PopStateEvent('popstate'))
        }
      },
      (error) => {
        
      }
    )  
  }
  
  function handleClickAllStores(){
    setSearchField("")
    resetUrl()
  }

  function handleClickRegion(region){
    if (window.history.pushState) {
      const newUrl = new URL(window.location.origin + window.location.pathname)
      newUrl.searchParams.set('region', region)
      window.history.pushState({}, '', newUrl)
      dispatchEvent(new PopStateEvent('popstate'))
    }
  }

  function setSearchField(text){
    $(".action-pane__search > input").val(text)
  }

  function resetUrl(){
    if (window.history.pushState) {
      const newUrl = new URL(window.location.origin + window.location.pathname)
      window.history.pushState({}, '', newUrl)
      dispatchEvent(new PopStateEvent('popstate'))
    }
  }

  function openFilter(){
    $(".store-locations-filter").addClass("active")
  }
  
  function closeFilter(){
    $(".store-locations-filter").removeClass("active")
  }

  function isFiltered(filterData){
    if(filterData.products.length || filterData.services.length || filterData.storeTypes.length){
      return true
    }else{
      return false
    }
  }
  
  function moveMapToDesktop(){
    $(".store-locations__map-desktop").append($("#stores-map"))
    map.resize();
  }
  
  function moveFilterToHTMLBody(){
    $('body').append($('.store-locations-filter'));
  }

  function getPHCurrentTime() {
    let now = new Date();
    let formatter = new Intl.DateTimeFormat('en-PH', {
      timeZone: 'Asia/Manila',
      year: 'numeric',
      month: 'numeric',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    });
    let formattedDate = formatter.format(now);
    return new Date(formattedDate)
  }
  
  function getBusinessHoursOfDay(businessHours){
    const phCurrentTime = getPHCurrentTime()
    function getDayOfWeek(dateObject) {
      let daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      return daysOfWeek[dateObject.getDay()].toLowerCase()
    }
    return businessHours[getDayOfWeek(phCurrentTime)]
  }
  
  function isStoreOpen(businessHours){
    const phCurrentTime = getPHCurrentTime()
    const businessHoursOfDay = getBusinessHoursOfDay(businessHours)
    
    if (businessHoursOfDay === "Closed") return false;
    
    const [openingTime24h, closingTime24h] =  businessHoursOfDay.split(" - ");
    function getTimeFromString(timeString) {
        let [hours, minutes, seconds] = timeString.split(':').map(num => parseInt(num));
        return { hours, minutes, seconds };
    }
       
    const {hours: openingTimeHours, minutes: openingTimeMinutes} = getTimeFromString(openingTime24h)
    const {hours: closingTimeHours, minutes: closingTimeMinutes} = getTimeFromString(closingTime24h)

    let openingTime = new Date(phCurrentTime);
    openingTime.setHours(openingTimeHours, openingTimeMinutes, 0, 0);
    let closingTime = new Date(phCurrentTime);
    closingTime.setHours(closingTimeHours, closingTimeMinutes, 0, 0);

    return phCurrentTime >= openingTime && phCurrentTime <= closingTime;
  }
  
  function storeStatus(businessHours){
    function convert24hTo12h(militaryTime){
      const [hours, minutes] = militaryTime.split(':');
      
      const date = getPHCurrentTime();
      date.setHours(hours);
      date.setMinutes(minutes);
      
      return date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'Asia/Manila' });
    }
    const isOpen = isStoreOpen(businessHours)
    const businessHoursOfDay = getBusinessHoursOfDay(businessHours)

    if(businessHoursOfDay === "Closed") return `<span class="closed">Closed</span>`
    
    const [openingTime24h, closingTime24h] = getBusinessHoursOfDay(businessHours).split(" - ")
    if(isOpen){
      return `<span>Open</span> • Closes at ${convert24hTo12h(closingTime24h)}`
    }else{
      return `<span class="closed">Closed</span> • Opens at ${convert24hTo12h(openingTime24h)}`
    }
  }

  function applyFilter(stores, filterData){
    const filteredStores = stores.filter(store => {
      const storeDataMetFilterCondition = (!filterData.products.length ? true : store.products.some(product => filterData.products.includes(product.toLowerCase()))) &&
        (!filterData.services.length ? true : store.services.some(service => filterData.services.includes(service.toLowerCase()))) &&
        (!filterData.storeTypes.length ? true : filterData.storeTypes.includes(store.storeType.toLowerCase()))
      return storeDataMetFilterCondition
    })
    storesCurrentState = filteredStores
    setSearchField("")
    changeTabMobile("list")
    resetUrl()
    renderFilterOpenerBtn(filterData)
    renderMapData(filteredStores)
    renderPageByUrl(filteredStores)
    closeFilter()
  }
  
  function init(){
    moveFilterToHTMLBody()
    
    if (isDesktop) {
      moveMapToDesktop()
    } 

    map.on('load', function() {
      map.loadImage(
      'https://cdn.shopify.com/s/files/1/0172/4383/2374/files/marker.png?v=1681787034',
      (error, image) => {
        if (error) throw error
        
        map.addImage('custom-marker', image)

        renderMapData(storesCurrentState)
        renderPageByUrl(storesCurrentState)
      })
    })
    
  }
  init()
  
</script>
      
{% schema %}
  {
    "name": "Store Locations",
    "settings": [
      {
        "type": "header",
        "content": "Filter Settings"
      },
      {
        "type": "text",
        "id": "products_filters",
        "label": "Filters(Products)",
        "info": "e.g. Sun, Optical, Anti-Rad"
      },
      {
        "type": "text",
        "id": "services_filters",
        "label": "Filters(Services)",
        "info": "e.g. Free eye exam, Same day glasses, Sunnies Guarantee"
      },
      {
        "type": "text",
        "id": "store_type_filters",
        "label": "Filters(Store type)",
        "info": "e.g. Department store, Sunnies World, Kiosk"
      }
    ]
  }
{% endschema %}
