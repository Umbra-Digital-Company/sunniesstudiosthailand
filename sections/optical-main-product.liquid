{{ 'optical-main-product.css' | asset_url | stylesheet_tag }}
{{ 'main-product-2024.css' | asset_url | stylesheet_tag }}
{{ 'product-variants-2024.css' | asset_url | stylesheet_tag }}
{{ 'mini-product-card.css' | asset_url | stylesheet_tag }}

{% liquid
  assign current_variant = product.selected_or_first_available_variant
  assign selected_color = current_variant.option1 | handleize
  assign specific_lifestyle = 'lifestyle-' | append: selected_color
  assign item_type = ''
  assign isIconView = false
  assign product_measurements = 'initial'

  if product.tags contains 'merch'
    assign item_type = 'merch'

    if product.tags contains 'icon-view'
      assign isIconView = false
    else
      assign isIconView = true
    endif
  else
    assign item_type = 'studios_frame'
    assign isIconView = false
  endif

  capture image_gallery
    for image in product.images
      assign image_color = image.alt | split: '::' | first | handleize
      assign image_alt = image.alt | split: '::' | last
      if image_color == selected_color
        if image_alt != 'hidden'
          render 'product-gallery-image' with image: image, alt: image_alt
        endif
      endif
    endfor
  endcapture

  capture measurement_gallery
    for image in product.images
      assign image_color = image.alt | split: '::' | first | downcase
      assign image_alt = image.alt | split: '::' | last
      if image_color == 'measurement'
        assign product_measurements = product_measurements | append: ',' | append: image_color
        render 'responsive-image' with image: image, alt: image_alt, image_class: "css-class", wrapper_class: "wrapper-css-class", max_width: 900, max_height: 500
      endif
    endfor
  endcapture

  capture desc_tags
    assign arrangedTags = ''
    assign hasArrangment = false
    assign arrangedTagsByStar = ''
    assign hasArrangmentByStar = false

    for tag in product.tags
      assign clean_tag = tag | downcase
      if clean_tag contains 'arranged_desc'
        assign split_label = tag | split: '::' | last | strip
        assign split_tags = split_label | split: '-'
        assign arrangedTags = split_tags
        assign hasArrangment = true
      endif
    endfor

    for tag in product.tags
      assign clean_tag = tag | downcase
      if clean_tag contains 'arranged_by_star_desc'
        assign split_label = tag | split: '::' | last | strip
        assign split_tags = split_label | split: '*'
        assign arrangedTagsByStar = split_tags
        assign hasArrangmentByStar = true
      endif
    endfor

    if isIconView == false
      echo '<ul class="tags-list">'
      if hasArrangment == true
        for tag in arrangedTags
          assign clean_tag = tag | downcase
          assign content = tag | strip
          assign classes = content | handleize
          assign output = '<li class="tag-icon tag-icon__' | append: classes | append: '">' | append: content | append: '</li>'
          echo output
        endfor
      elsif hasArrangmentByStar == true
        for tag in arrangedTagsByStar
          assign clean_tag = tag | downcase
          assign content = tag | strip
          assign classes = content | handleize
          assign output = '<li class="tag-icon tag-icon__' | append: classes | append: '">' | append: content | append: '</li>'
          echo output
        endfor
      else
        for tag in product.tags
          assign clean_tag = tag | downcase
          if clean_tag contains 'desc'
            assign content = tag | split: '::' | last | strip
            assign classes = content | handleize
            assign output = '<li class="tag-icon tag-icon__' | append: classes | append: '">' | append: content | append: '</li>'
            echo output
          endif
        endfor
      endif
      echo '</ul>'
    else
      echo '<ul>'
      for tag in productTags
        assign clean_tag = tag | downcase
        if clean_tag contains 'desc'
          assign content = tag | split: '::' | last | strip
          assign output = '<li>' | append: content | append: '</li>'
          echo output
        endif
      endfor
      echo '</ul>'
    endif
  endcapture

  assign extra_video_desktop = product.metafields.media.extra_video_desktop_mobile.value | first
  assign extra_video_mobile = product.metafields.media.extra_video_desktop_mobile.value | last
%}

{% include 'prescription-flow-window' %}

<div
  class="main-product-container"
  data-section-id="{{ section.id }}"
  data-section-type="product"
>
<div class="main-product-wrapper">
  <div class="vto-wrapper">
    <div class="swym-button swym-add-to-wishlist swym-pdp-icon"
      data-with-epi="true"
      data-swaction="addToWishlist"
      data-product-id="{{ product.id }}"
      data-variant-id="{{ product.variants[0].id }}"
      data-product-url="{{ shop.url }}{{ product.url }}">{% comment %}<img src="https://cdn.shopify.com/s/files/1/0268/4141/5798/files/Heart_Stroke.svg?v=1733389077" style="height: 18px; width: 20px;" alt="">{% endcomment %}
    </div>
    {% render 'product-vto' %}
  </div>

  <div>
    {% unless extra_video_desktop == blank %}
      {{ extra_video_desktop | video_tag: autoplay: true, loop: true, muted:true, class: "main-product-video-desktop" }}
    {% endunless %} 

    {% comment %} {% render 'desktop-product-vto' %} {% endcomment %}

    {% render 'desktop-gallery' %}
  </div>

  <div class="product-details">
    <header class="Product__header">
      {% render 'product-information' %}

      {% form 'product', product %}
        <input
          type="hidden"
          name="id"
          value="{{ current_variant.id }}"
          class="js-variant-id"
        >
        <input type="hidden" name="properties[_item_type]" class="js-product-properties" value="{{item_type}}">

        {% unless product.has_only_default_variant %}
          {% render 'product-variants' %}
        {% endunless %}

        {% if current_variant.available %}
          <div class="new-prescription-toggle-container">
            <button
              type="button"
              name="customize"
              id="new-prescription-toggle"
              class="select-lenses-button"
              data-url="/account?redirect_url={{ product.url | within: collection }}"
            >
            Select lenses
            {% comment %} Select lenses - ${{ current_variant.price | money_without_currency | remove: '.00' }} {% endcomment %}
        </button>
            <div class="space-liner product-mobile-container"></div>
          </div>
          {% else %}
          <div class="new-prescription-toggle-container">
            {% render 'product-join-waitlist-button' with product_id: product.id, current_variant_id: current_variant.id %}
         </div> 
        {% endif %}
      {% endform %}
    </header>
    {% unless extra_video_mobile == blank %}
       {{ extra_video_mobile | video_tag: autoplay: true, loop: true, muted:true, class: "main-product-video-mobile" }}
    {% endunless %}
    {% render 'product-description-details' %}
  </div>
</div>
</div>

{% render '_prescription-meta', blocks: section.blocks, settings: section.settings, lenses: settings.lenses %}
{% render '_shopify_data' %}

<script src="{{ 'product-information.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'product-description-accordion.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'mini-product-card.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'pdp-cta.js' | asset_url }}" defer="defer"></script>

{% schema %}
{
  "name": "Optical Main Product",
  "settings": [
    {
      "type": "header",
      "content": "Product Callout"
    },
    {
      "type": "checkbox",
      "id": "is_callout_hidden",
      "label": "Hide Callout"
    },
    {
      "type": "text",
      "id": "callout_title",
      "label": "Callout Title"
    },
    {
      "type": "richtext",
      "id": "callout_copy",
      "label": "Callout Copy"
    },
    {
      "type": "url",
      "id": "callout_url",
      "label": "Callout URL"
    },
    {
      "type": "text",
      "id": "callout_url_label",
      "label": "Callout URL Label"
    },
    {
      "type": "header",
      "content": "What's included"
    },
    {
      "type": "richtext",
      "id": "whats_included_content",
      "label": "What's Included Content"
    },
    {
      "type": "header",
      "content": "Pair nicely with"
    },
    {
      "type": "product",
      "id": "pair_product_one",
      "label": "Pair Product One"
    },
    {
      "type": "product",
      "id": "pair_product_two",
      "label": "Pair Product Two"
    }
  ],
  "blocks": [
    {
      "name": "Product Made With",
      "type": "product_made_with",
      "settings": [
        {
          "type": "header",
          "content": "Product Made With",
          "info": "To use this block, add block's title to variant metafields."
        },
        {
          "type": "image_picker",
          "id": "icon",
          "label": "Icon"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "info": "To use this block, add this title to variant metafields."
        },
        {
          "type": "url",
          "id": "title_link",
          "label": "Title Link"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Description"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Optical Main Product"
    }
  ]
}
{% endschema %}
